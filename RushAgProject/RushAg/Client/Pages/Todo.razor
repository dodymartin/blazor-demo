@page "/todo"
@inject AppState state

<PageTitle>To Do</PageTitle>

@if (@state.IsLoading)
{
    <h3>Loading....</h3>
}
else
{
    <h3>@($"To Do List ")</h3><p>@($"({state.TodoCompleted.Count} / {state.TodoNotCompleted.Count + state.TodoCompleted.Count})")</p>

    @foreach(var todo in state.TodoNotCompleted)
    {
        <TodoView 
            Todo="@todo"
            OnDelete="@state.DeleteTodo"
            OnToggleComplete="@state.ToggleComplete"
            OnSaveTodoStep="state.AddStep" />    
    }

    <AddTodoForm OnSave="state.AddTodo" />
    @if (state.TodoCompleted.Any())
    {
        <button class="btn btn-primary" @onclick="ToggleShowComplete">Show Complete</button>
    }
    @if (_showCompleted)
    {
        @foreach (var todo in state.TodoCompleted)
        {
            <TodoView Todo="@todo"
                OnDelete="@state.DeleteTodo"
                OnToggleComplete="@state.ToggleComplete" />
        }

    }
    
}

@code {
    private bool _showCompleted = false;

    protected override async Task OnInitializedAsync()
    {
        state.OnChange += StateHasChanged;
        await state.GetTodos();
    }

    private void CancelUpdate()
    {
        state.CurrentTodo = null;
        StateHasChanged();
    }

    private void SetCurrentTodo(TodoItemDto todo)
    {
        state.CurrentTodo = todo;
        StateHasChanged();
    }

    private void ToggleShowComplete() => _showCompleted = !_showCompleted;

}
