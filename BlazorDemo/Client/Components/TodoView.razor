
<div class="shadow pt-3 ps-3 pe-3 pb-1 mb-3 bg-white rounded border">
    <div class="d-flex flex-row align-items-center bg-light mt-0 p-1 border">
        <div class="d-flex flex-fill p-2">
            <input class="form-check-input me-3" @key="@Todo" type="checkbox" checked="@Todo.IsComplete" id="@Todo.Id" onchange="@(() => OnToggleComplete.InvokeAsync(Todo))" />
            <p class="form-check-label h4" for="@Todo.Id">@Todo.Name</p>
        </div>
        <div class="d-flex">
            <p>@Todo.CreateDate</p>
        </div>
        @if (Todo.IsComplete)
        {
            <div class="d-flex">
                <p>@Todo.CompleteDate</p>
            </div>
        }

        <Div Flex="Flex.JustifyContent.End" Padding="Padding.Is3.FromEnd">
            <Button Margin="Margin.Is1" Color="Color.Danger" Outline Clicked="() => OnDelete.InvokeAsync(Todo)">
                <Span Padding="Padding.Is0">
                    <Icon Name="IconName.Delete" />
                </Span>
            </Button>
            <Button Margin="Margin.Is1" Color="Color.Dark" Outline>
                <Span Padding="Padding.Is0">
                    <Icon Name="IconName.Edit" />
                </Span>
            </Button>
        </Div>
    </div>
    <div class="mt-3 ps-4">
        <p class="fs-5">@Todo.Notes</p>
    </div>
    @if (Todo.Steps.Any())
    {
        <button class="btn btn-primary" @onclick="ToggleShowSteps">Show Steps</button>
        <p class="mb-3">@($"Steps ({Todo.Steps.Where(x => x.IsComplete).Count()} / {Todo.Steps.Count})")</p>
        @if (_showSteps)
        {
            foreach (var step in Todo.Steps)
            {
                <TodoStepView TodoStep="step" />
            }
            <AddStepForm TodoItem="Todo"
                 OnSave="OnSaveTodoStep" />
        }
    }
</div>


@code {
    private bool _showSteps = false;
    [Parameter]
    public TodoItemDto Todo { get; set; }
    [Parameter]
    public EventCallback<TodoItemDto> OnDelete { get; set; }
    [Parameter]
    public EventCallback<TodoItemDto> OnEdit { get; set; }
    [Parameter]
    public EventCallback<TodoItemDto> OnToggleComplete { get; set; }
    [Parameter]
    public EventCallback<CreateTodoStepDto> OnSaveTodoStep { get; set; }

    private void ToggleShowSteps() => _showSteps = !_showSteps;

}
