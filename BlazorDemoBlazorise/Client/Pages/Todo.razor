@page "/todo"
@inject TodoService todoService

<PageTitle>To Do</PageTitle>

@if (@todoService.IsLoading)
{
    <h3>Loading....</h3>
}
else
{
    <Div>
    <Div>
    <h4>@($"To Do List ")</h4>

    <p>@($"({todoService.TodoCompleted.Count} / {todoService.TodoNotCompleted.Count + todoService.TodoCompleted.Count})")</p>

    <TableView Items="@todoService.TodoNotCompleted"
           Context="todo"
           TItem="TodoItemDto">
        <TableHeading>
            <TodoTableHeading />
        </TableHeading>
        <TableBody>
            <TodoTableBody Todo="@todo" />    
        </TableBody>
    </TableView>

    @if (todoService.TodoCompleted.Any())
    {
        <Button Color="Color.Primary" Outline Clicked="ToggleShowComplete">
        Show Complete
            <Span Padding="Padding.Is0">
                @if(_showCompleted)
                {
                    <Icon Name="IconName.AngleDown" />
                }
                else
                {
                    <Icon Name="IconName.AngleRight" />
                }
            </Span>
            
        </Button>
    }
    @if (_showCompleted)
    {
        <TableView Items="@todoService.TodoCompleted"
                   Context="todo"
                   TItem="TodoItemDto">
            <TableHeading>
                <TodoTableHeading ShowCompleteDate="@true"/>
            </TableHeading>
            <TableBody>
                <TodoTableBody Todo="@todo" 
                               ShowCompleteDate="@true"/>
            </TableBody>
        </TableView>

    }
    </Div>
    <Column Position="Position.Fixed.Bottom.Is0"
         ColumnSize="ColumnSize.Is12">
        <AddTodoForm OnSave="todoService.AddTodo"/>
    </Column>
    </Div>
}

@code {
    private bool _showCompleted = false;

    protected override async Task OnInitializedAsync()
    {
        todoService.OnChange += StateHasChanged;
        await todoService.GetTodos();
    }

    private void CancelUpdate()
    {
        todoService.CurrentTodo = null;
        StateHasChanged();
    }

    private void SetCurrentTodo(TodoItemDto todo)
    {
        todoService.CurrentTodo = todo;
        StateHasChanged();
    }

    private void ToggleShowComplete() => _showCompleted = !_showCompleted;

}
